// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    //url      = env("DATABASE_URL")

    url       = env("NEXT_PRIVATE_DATABASE_URL")
    directUrl = env("NEXT_PRIVATE_DIRECT_DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model checkin {
    id            String    @id @default(cuid())
    created_at    DateTime
    name          String
    check_in      DateTime
    check_out     DateTime
}

model cloudbeds_guest {
    id                 String    @id @default(cuid())
    created_at         DateTime
    guest_id           String
    guest_first_name   String
    guest_last_name    String
    guest_phone        String
    guest_email        String
    guest_country_code String
    check_in           DateTime
    check_out          DateTime
} 

model cloudbeds_reservation {
    id                 String    @id @default(cuid())
    created_at         DateTime
    reservation_id     String
    check_in           DateTime
    check_out          DateTime
    isCheckedIn        Boolean
    roomType           String
    URL                String
    number_of_guests   Int
}
model customer {
    id                   String    @id @default(cuid())
    stripe_customer_id   String
}

model prices   {
    id                 String    @id @default(cuid())
    product_id         String
    isActive           Boolean
    description        String
    unit_amount        String
    currency           String
    type               String   // needs to be changed with pricing type - type
    interval           String   // needs to be changed with pricing plan interval - type
    interval_count     Int
    trial_period_days  Int
    metadata           String // needs to be json
}

model product  {
    id                 String    @id @default(cuid())
    isActive           Boolean
    name               String
    description        String
    imageURL           String
    metadata           String // needs to be json
}

model subscription  {
    id                   String    @id @default(cuid())
    SessionID            String    
    userEmail            String
    customerID           String?
    user_id              String   //pretty much everything bellow this we get from Stripe API
    subscriptionStatus   Boolean
    metadata             String // needs to be json
    price_id             String
    quantity             String
    cancel_at_period_end Boolean
    created_at           DateTime
    currentPeriod_start  DateTime
    currentPeriod_end    DateTime
    ended_at             DateTime?
    cancel_at            DateTime?
    cancelled_at         DateTime?
    trial_start          DateTime?
    trial_end            DateTime?

    daysUsed             Int       @default(0)
} 

model SubscriptionPlans {
    id                  String      @id @default(cuid())
    priceID             String
    packageName         String
    description         String
    numberOfDays        Int
    price        Int
}
model HCL_user  {
    id                   String    @id @default(cuid())
    email                String    @unique
    recovery_email       String?   @unique
    username             String    @unique
    password             String    @default(cuid()) 
    full_name            String?
    avatar_url           String? 
    billing_address      String? // needs to be json
    payment_method       String? // needs to be json
    isAdmin              Boolean  @default(false)
    isApproved           Boolean  @default(false)

}

model HCL_Application {
    id                             String    @id @default(cuid())
    name                           String
    email                          String   
    DateOfBirth                    DateTime
    gender                         String
    phoneNumber                    String
    DriverLicenseNumber            String
    state                          String
    airline                        String
    AirlineEmployeeID              String
    JobTitle                       String
    Airline_ID_Image               String
    Emergency_Contact_Name         String
    Emergency_Contact_PhoneNumber  String
    Emergency_Contact_Relationship String
    RefferedBy                     String
    isApproved                     Boolean  @default(false)
    isReviewed                     Boolean  @default(false)
    applicationDate                DateTime @default(now())
}